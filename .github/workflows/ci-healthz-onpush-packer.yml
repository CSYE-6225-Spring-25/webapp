name: Healthz Packer Build Machine image

on:
  push:
    branches:
        - main

env:
  PACKER_VERSION: "1.12.0"

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}

    steps:
    - name: Check the Repo
      uses: actions/checkout@v3

    - name: Installing Postgres 
      run: |
        sudo apt update 
        sudo apt install -y postgresql postgresql-contrib
    
    - name: Installing node_modules
      run: npm install
        
    - name: Starting postgres Service
      run: sudo systemctl start postgresql

    - name: Database and user setup
      run: |
        sudo -u postgres psql -c "CREATE ROLE $DB_USERNAME WITH LOGIN CREATEDB PASSWORD '$DB_PASSWORD';"
        sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USERNAME;"

    - name: dropping the table 
      run: |
          sudo -u postgres psql -d $DB_NAME -c 'DROP TABLE IF EXISTS "HealthChecks" CASCADE;'

    - name: healthz api integration test
      run: npm test

    - name: post job clean up
      if: always()
      run: |
        echo "started cleaning"
        pkill -P $$ || true  
        sudo systemctl stop postgresql  
        echo "done with cleaning"

  packer-mi-generation:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      ami-id: ${{ steps.extract_packer_outputs.outputs.ami_id }}
    steps:
      - name: Check the Repo
        uses: actions/checkout@v4

      - name: Zipping Application
        run: zip -r webapp.zip .
        working-directory: .
    
      - name: List artifact contents
        run: ls -la webapp.zip
    
      - name: AWS profile configuration
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Run packer init
        working-directory: packer
        run: packer init .

      - name: Run packer validate
        working-directory: packer
        run: packer validate .
      
      - name: Build AMI with Packer for both GCP and AWS
        working-directory: packer
        if: success()
        run: |
          packer build --force \
            -var "zip-path=$(pwd)/../webapp.zip" \
            -var "aws-profile=${{ secrets.AWS_PROFILE }}" \
            -var "aws-region=${{ secrets.AWS_REGION }}" \
            -var "aws-instance-type=${{ secrets.AWS_INSTANCE_TYPE }}" \
            -var "aws-ssh-username=ubuntu" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "db_user=${{ secrets.DB_USERNAME }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "port=${{ secrets.PORT }}" \
            -var "db_host=${{ secrets.DB_HOST }}" \
            -var "db_port=${{ secrets.DB_PORT }}" \
            -var "aws-subnet-id=${{ secrets.AWS_SUBNET_ID }}" \
            . | tee $HOME/packer_output.log

      - name: Extract AMI ID and GCP Image Name
        id: extract_packer_outputs
        run: |
          AMI_ID=$(grep -oP 'ami-[a-f0-9]+' $HOME/packer_output.log | tail -1)
          
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
          
      - name: Share AWS AMI with Another AWS Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ env.ami-id }} \
            --launch-permission "Add=[{UserId=${{ secrets.AWS_DEMO_ACCOUNT_ID }} }]" \
            --region ${{ secrets.AWS_REGION }}

  deploy-new-ami:
    needs: packer-mi-generation
    runs-on: ubuntu-latest
    env:
      ASG_NAME: asg
      LAUNCH_TEMPLATE_NAME: csye6225_asg
      AMI_ID: ${{ needs.packer-mi-generation.outputs.ami_id }}
    steps:
      - name: Check the Repo
        uses: actions/checkout@v4

      - name: DEMO Account AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Debug AMI ID
        run: |
          echo "Using AMI ID: $AMI_ID"

      - name: Creating a new Launch Template
        id: launch_template_version
        run: |
          echo "Creating new launch template version with AMI $AMI_ID..."  
          NEW_LT_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name $LAUNCH_TEMPLATE_NAME \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \      
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          echo "New launch template version: $NEW_LT_VERSION"
          echo "lt_version=$NEW_LT_VERSION" >> $GITHUB_OUTPUT

      - name: Updating the Autoscaling for new template version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template "LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Version=${{ steps.launch_template_version.outputs.lt_version }}"

      - name: Enabling the Instance Refresh on Autoscaling group
        id: refresh_instance
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage":90,"InstanceWarmup":60}' \
            --query 'InstanceRefreshId' --output text)
          echo "Instance refresh initiated with ID: $REFRESH_ID"
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      - name: Waiting for instance to refresh
        run: |
          REFRESH_ID=${{ steps.refresh_instance.outputs.refresh_id }}
          echo "Waiting for instance refresh with ID: $REFRESH_ID to complete..."
          STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME \
            --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" --output text)
          echo "Initial refresh status: $STATUS"
          while [[ "$STATUS" != "Successful" && "$STATUS" != "Failed" ]]; do
            sleep 30
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[?InstanceRefreshId=='$          
            